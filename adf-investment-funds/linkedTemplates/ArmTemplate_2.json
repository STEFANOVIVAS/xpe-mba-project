{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-investment-funds"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_cvm_actual_investment_funds')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest investment funds register",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_cvm_if_register_http",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_cvm_if_register_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Transform cvm investiment funds register",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest investment funds register",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_funds_register",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FundsRegisterSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "get_source_files_from_cvm",
							"headers": {},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup for actual CVM file links",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_cvm_actual_quotes_links",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Ingest investment funds actual quotes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for actual CVM file links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for actual CVM file links').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Parse files in datalake",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_cvm_if_csv_adls",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().url,'.csv')",
													"type": "Expression"
												},
												"raw_folder": "investment-funds-quotes"
											}
										},
										"fieldList": [
											"exists",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If update is greater then timesatmp",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Parse files in datalake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(and(equals(activity('Parse files in datalake').output.exists,true),greater(formatDateTime(item().update,'yyyy-MM-ddTHH:mm:ss.fffffffK'),convertTimeZone(formatDateTime(activity('Parse files in datalake').output.lastModified,'yyyy-MM-ddTHH:mm:ss.fffffffK'),'UTC','E. South America Standard Time'))),equals(activity('Parse files in datalake').output.exists,false))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy from http binary actual quotes_copy1_copy1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 1,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "HttpReadSettings",
															"requestMethod": "GET"
														},
														"formatSettings": {
															"type": "BinaryReadSettings",
															"compressionProperties": {
																"type": "ZipDeflateReadSettings"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_if_links_binary_http",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_links_binary_adls",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Copy data from zipped binary to csv_copy1_copy1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy from http binary actual quotes_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"compressionProperties": {
																"type": "ZipDeflateReadSettings"
															}
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_if_zip_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_csv_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(variables('file_name'),'.csv')",
																"type": "Expression"
															},
															"raw_folder": "investment-funds-quotes"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"exists": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-31T23:09:33Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataflow_transform_funds_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform incremental ingestion funds quotes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_quotes",
								"type": "DataFlowReference",
								"parameters": {
									"SinkFileName": "'$Filename'"
								},
								"datasetParameters": {
									"SourceQuotesFromRawLayer": {
										"sourceFileName": "filename"
									},
									"SourceRegisterRawLayer": {},
									"SaveFilesInPresentationLayer": {},
									"SinkRowsWithErrors": {
										"errorRowsFileName": "filename"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-13T23:35:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_incremental_funds_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for actual CVM file links",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If transform pipeline already runs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_cvm_actual_quotes_links",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each file in raw datalake container",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for actual CVM file links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for actual CVM file links').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get last modified date from raw container",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_cvm_if_csv_adls",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().url,'.csv')",
													"type": "Expression"
												},
												"raw_folder": "investment-funds-quotes"
											}
										},
										"fieldList": [
											"exists",
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition2",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get last modified date from raw container",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get last modified date from raw container').output.lastModified,formatDateTime(variables('transform_quotes_pipeline_last_run'),'yyyy-MM-ddTHH:mm:ss'))\n\n\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Transform incremental ingestion funds quotes",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "df_transform_quotes",
														"type": "DataFlowReference",
														"parameters": {
															"SinkFileName": {
																"value": "'@{concat('transform_',activity('Get last modified date from raw container').output.itemName)}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"SourceQuotesFromRawLayer": {
																"sourceFileName": {
																	"value": "@activity('Get last modified date from raw container').output.itemName",
																	"type": "Expression"
																}
															},
															"SourceRegisterRawLayer": {},
															"SaveFilesInPresentationLayer": {},
															"SinkRowsWithErrors": {}
														}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Take transform quotes pipeline last run",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://management.azure.com/subscriptions/4d2b06c4-43c3-4174-ae4f-7cd2d52bdae2/resourceGroups/investment-funds/providers/Microsoft.DataFactory/factories/adf-investment-funds/queryPipelineRuns?api-version=2018-06-01",
							"body": {
								"lastUpdatedAfter": "2022-06-16T00:36:44.3345758Z",
								"lastUpdatedBefore": "2024-08-16T00:49:48.3686473Z",
								"filters": [
									{
										"operand": "PipelineName",
										"operator": "Equals",
										"values": [
											"pl_transform_incremental_funds_quotes"
										]
									},
									{
										"operand": "Status",
										"operator": "Equals",
										"values": [
											"Succeeded"
										]
									}
								],
								"orderBy": [
									{
										"order": "DESC",
										"orderBy": "RunEnd"
									}
								]
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com"
							}
						}
					},
					{
						"name": "If transform pipeline already runs",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Take transform quotes pipeline last run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(empty(activity('Take transform quotes pipeline last run').output.value))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set last pipeline run date to variable_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "transform_quotes_pipeline_last_run",
										"value": {
											"value": "@activity('Take transform quotes pipeline last run').output.value[0].lastUpdated",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set last pipeline run date to variable",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "transform_quotes_pipeline_last_run",
										"value": {
											"value": "1990-01-01 00:00:00",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"transform_quotes_pipeline_last_run": {
						"type": "String",
						"defaultValue": "'1990-01-01 00:00:00'"
					},
					"file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-13T23:35:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_etl_funds_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute ingestion Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_ingestion_if_actual_quotes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute incremental transform Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute ingestion Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_transform_incremental_funds_quotes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Etl"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-13T23:35:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_transform_incremental_funds_quotes')]"
			]
		}
	]
}