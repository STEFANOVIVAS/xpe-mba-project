{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-investment-funds"
		},
		"AzureFunction_ls_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction_ls'"
		},
		"ls_azure_databricks_actual_quotes_http_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'ls_azure_databricks_actual_quotes_http'"
		},
		"ls_cvm_if_adls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_cvm_if_adls'"
		},
		"ls_sql_investiment_funds_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sql_investiment_funds_db'"
		},
		"AzureFunction_ls_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://getsourcefilescvm.azurewebsites.net"
		},
		"AzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://investimentFundsKV.vault.azure.net/"
		},
		"ls_cvm_if_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://investimentfundsadls.dfs.core.windows.net/"
		},
		"ls_cvm_if_http_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dados.cvm.gov.br/dados/FI/DOC/INF_DIARIO/DADOS/"
		},
		"ls_cvm_if_register_http_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dados.cvm.gov.br/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_cvm_actual_investment_funds')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest investment funds register",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_cvm_if_register_http",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_cvm_if_register_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Transform cvm investiment funds register",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Ingest investment funds register",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_funds_register",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FundsRegisterSource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Azure Function1",
						"type": "AzureFunctionActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "get_source_files_from_cvm",
							"headers": {},
							"method": "GET"
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup for actual CVM file links",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Azure Function1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_cvm_actual_quotes_links",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Ingest investment funds actual quotes",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for actual CVM file links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for actual CVM file links').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Parse files in datalake",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_cvm_if_csv_adls",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().url,'.csv')",
													"type": "Expression"
												},
												"raw_folder": "investment-funds-quotes"
											}
										},
										"fieldList": [
											"exists",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If update is greater then timesatmp",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Parse files in datalake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(and(equals(activity('Parse files in datalake').output.exists,true),greater(formatDateTime(item().update,'yyyy-MM-ddTHH:mm:ss.fffffffK'),convertTimeZone(formatDateTime(activity('Parse files in datalake').output.lastModified,'yyyy-MM-ddTHH:mm:ss.fffffffK'),'UTC','E. South America Standard Time'))),equals(activity('Parse files in datalake').output.exists,false))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy from http binary actual quotes_copy1_copy1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 1,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "HttpReadSettings",
															"requestMethod": "GET"
														},
														"formatSettings": {
															"type": "BinaryReadSettings",
															"compressionProperties": {
																"type": "ZipDeflateReadSettings"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_if_links_binary_http",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_links_binary_adls",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Copy data from zipped binary to csv_copy1_copy1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy from http binary actual quotes_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"compressionProperties": {
																"type": "ZipDeflateReadSettings"
															}
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_if_zip_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_csv_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(variables('file_name'),'.csv')",
																"type": "Expression"
															},
															"raw_folder": "investment-funds-quotes"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"exists": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_register_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_register_adls')]",
				"[concat(variables('factoryId'), '/dataflows/df_transform_funds_register')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction_ls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_actual_quotes_links')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_csv_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_links_binary_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_links_binary_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_zip_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_cvm_historic_investment_funds')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for historic CVM file links",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "raw/cvm_historical_links.csv",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": true,
									"partitionRootPath": "raw/cvm_historic_quotes_links.csv"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_cvm_if_historic_quotes_links",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy investment funds historic quotes for every year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for historic CVM file links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for historic CVM file links').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@variables('exists')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy from http binary historic quotes_copy1_copy1_copy1",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 1,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "HttpReadSettings",
															"requestMethod": "GET"
														},
														"formatSettings": {
															"type": "BinaryReadSettings"
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_historic_source_binary_http",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": "@concat(item().url,'.zip')"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_links_binary_adls",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": {
																"value": "@concat(item().url,'.zip')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Copy data from zipped binary to csv_copy2_copy1_copy1",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy from http binary historic quotes_copy1_copy1_copy1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"compressionProperties": {
																"type": "ZipDeflateReadSettings"
															}
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_if_zip_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(item().url,'.zip')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_csv_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(item().url,'.csv')",
																"type": "Expression"
															},
															"raw_folder": "investment-funds-historic-quotes"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Get Metadata from historic quotes adls",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_cvm_if_links_binary_adls",
											"type": "DatasetReference",
											"parameters": {
												"relativeURL": "@concat(item().url,'.zip')"
											}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_historic_quotes_links')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_links_binary_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_historic_source_binary_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_zip_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_csv_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_dataflow_transform_funds_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform incremental ingestion funds quotes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_quotes",
								"type": "DataFlowReference",
								"parameters": {
									"SinkFileName": "'$Filename'"
								},
								"datasetParameters": {
									"SourceQuotesFromRawLayer": {
										"sourceFileName": "filename"
									},
									"SourceRegisterRawLayer": {},
									"SaveFilesInPresentationLayer": {},
									"SinkRowsWithErrors": {
										"errorRowsFileName": "filename"
									}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_quotes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_etl_funds_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute ingestion Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_ingestion_if_actual_quotes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute incremental transform Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute ingestion Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_transform_incremental_funds_quotes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Etl"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ingestion_if_actual_quotes')]",
				"[concat(variables('factoryId'), '/pipelines/pl_transform_incremental_funds_quotes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingestion_if_actual_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for actual CVM file links",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_cvm_actual_quotes_links",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy investment funds actual quotes for every month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for actual CVM file links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for actual CVM file links').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Parse files in datalake",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_cvm_if_csv_adls",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().url,'.csv')",
													"type": "Expression"
												},
												"raw_folder": "investment-funds-quotes"
											}
										},
										"fieldList": [
											"exists",
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If file exists or source date is greater then timestamp",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Parse files in datalake",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(and(equals(activity('Parse files in datalake').output.exists,true),greater(formatDateTime(item().update,'yyyy-MM-ddTHH:mm:ss.fffffffK'),convertTimeZone(formatDateTime(activity('Parse files in datalake').output.lastModified,'yyyy-MM-ddTHH:mm:ss.fffffffK'),'UTC','E. South America Standard Time'))),equals(activity('Parse files in datalake').output.exists,false))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy data from http binary actual quotes",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 1,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "HttpReadSettings",
															"requestMethod": "GET"
														},
														"formatSettings": {
															"type": "BinaryReadSettings",
															"compressionProperties": {
																"type": "ZipDeflateReadSettings"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_if_links_binary_http",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_links_binary_adls",
														"type": "DatasetReference",
														"parameters": {
															"relativeURL": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Copy data from zipped binary to csv",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Copy data from http binary actual quotes",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"additionalColumns": [
															{
																"name": "ingestion_timestamp",
																"value": {
																	"value": "@variables('timestamp')",
																	"type": "Expression"
																}
															}
														],
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings",
															"compressionProperties": {
																"type": "ZipDeflateReadSettings"
															}
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_cvm_if_zip_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(variables('file_name'),'.zip')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_cvm_if_csv_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(variables('file_name'),'.csv')",
																"type": "Expression"
															},
															"raw_folder": "investment-funds-quotes"
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "File_name",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_name",
										"value": {
											"value": "@item().url",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set file timestamp",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "timestamp",
										"value": {
											"value": "@split(item().update,' ')[0]",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"file_exists": {
						"type": "Boolean"
					},
					"exists": {
						"type": "Boolean"
					},
					"last_modified": {
						"type": "String"
					},
					"timestamp": {
						"type": "String"
					},
					"file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cvm_actual_quotes_links')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_csv_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_links_binary_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_links_binary_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_zip_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingestion_if_register')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ingest investment funds register",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "ingestion_timestamp",
										"value": {
											"value": "@convertTimeZone(utcnow(),'UTC','E. South America Standard Time')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_cvm_if_register_http",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_cvm_if_register_adls",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Ingestion"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_register_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_register_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_funds_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Take transform quotes pipeline last run",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://management.azure.com/subscriptions/4d2b06c4-43c3-4174-ae4f-7cd2d52bdae2/resourceGroups/investment-funds/providers/Microsoft.DataFactory/factories/adf-investment-funds/queryPipelineRuns?api-version=2018-06-01",
							"body": {
								"lastUpdatedAfter": "2022-06-16T00:36:44.3345758Z",
								"lastUpdatedBefore": "2024-08-16T00:49:48.3686473Z",
								"filters": [
									{
										"operand": "PipelineName",
										"operator": "Equals",
										"values": [
											"pl_ingestion_if_register"
										]
									},
									{
										"operand": "Status",
										"operator": "Equals",
										"values": [
											"Succeeded"
										]
									}
								],
								"orderBy": [
									{
										"order": "DESC",
										"orderBy": "RunEnd"
									}
								]
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com"
							}
						}
					},
					{
						"name": "Set last pipeline run date to variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Take transform quotes pipeline last run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "transform_quotes_pipeline_last_run",
							"value": {
								"value": "@activity('Web1').output.value[0].lastUpdated",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get files from raw container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_get_last_modified_raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get files from raw container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get files from raw container').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get last modifieid date from raw container",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_get_metadata_adls_raw",
											"type": "DatasetReference",
											"parameters": {
												"raw_adls_file_name": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Get last modifieid date from raw container",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "raw_container_last_modified",
										"value": {
											"value": "@activity('Get Metadata2').output.lastModified",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If there are new files",
						"type": "IfCondition",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set last pipeline run date to variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(last(variables('raw_container_last_modified')),variables('transform_quotes_pipeline_last_run'))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Lookup for actual CVM file links",
									"type": "Lookup",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"dataset": {
											"referenceName": "ds_cvm_actual_quotes_links",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "Copy investment funds actual quotes for every month",
									"type": "ForEach",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Lookup for actual CVM file links",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('Lookup for actual CVM file links').output.value",
											"type": "Expression"
										},
										"isSequential": true,
										"activities": [
											{
												"name": "Parse files in datalake",
												"type": "GetMetadata",
												"state": "Inactive",
												"onInactiveMarkAs": "Succeeded",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ds_cvm_if_csv_adls",
														"type": "DatasetReference",
														"parameters": {
															"fileName": {
																"value": "@concat(item().url,'.csv')",
																"type": "Expression"
															},
															"raw_folder": "investment-funds-quotes"
														}
													},
													"fieldList": [
														"exists",
														"lastModified"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												}
											},
											{
												"name": "If file exists or source date is greater then timestamp",
												"type": "IfCondition",
												"state": "Inactive",
												"onInactiveMarkAs": "Succeeded",
												"dependsOn": [
													{
														"activity": "Parse files in datalake",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"expression": {
														"value": "@or(and(equals(activity('Parse files in datalake').output.exists,true),greater(formatDateTime(item().update,'yyyy-MM-ddTHH:mm:ss.fffffffK'),convertTimeZone(formatDateTime(activity('Parse files in datalake').output.lastModified,'yyyy-MM-ddTHH:mm:ss.fffffffK'),'UTC','E. South America Standard Time'))),equals(activity('Parse files in datalake').output.exists,false))",
														"type": "Expression"
													},
													"ifTrueActivities": [
														{
															"name": "Copy data from http binary actual quotes",
															"type": "Copy",
															"dependsOn": [],
															"policy": {
																"timeout": "0.12:00:00",
																"retry": 1,
																"retryIntervalInSeconds": 30,
																"secureOutput": false,
																"secureInput": false
															},
															"userProperties": [],
															"typeProperties": {
																"source": {
																	"type": "BinarySource",
																	"storeSettings": {
																		"type": "HttpReadSettings",
																		"requestMethod": "GET"
																	},
																	"formatSettings": {
																		"type": "BinaryReadSettings",
																		"compressionProperties": {
																			"type": "ZipDeflateReadSettings"
																		}
																	}
																},
																"sink": {
																	"type": "BinarySink",
																	"storeSettings": {
																		"type": "AzureBlobFSWriteSettings"
																	}
																},
																"enableStaging": false
															},
															"inputs": [
																{
																	"referenceName": "ds_cvm_if_links_binary_http",
																	"type": "DatasetReference",
																	"parameters": {
																		"relativeURL": {
																			"value": "@concat(variables('file_name'),'.zip')",
																			"type": "Expression"
																		}
																	}
																}
															],
															"outputs": [
																{
																	"referenceName": "ds_cvm_if_links_binary_adls",
																	"type": "DatasetReference",
																	"parameters": {
																		"relativeURL": {
																			"value": "@concat(variables('file_name'),'.zip')",
																			"type": "Expression"
																		}
																	}
																}
															]
														},
														{
															"name": "Copy data from zipped binary to csv",
															"type": "Copy",
															"dependsOn": [
																{
																	"activity": "Copy data from http binary actual quotes",
																	"dependencyConditions": [
																		"Succeeded"
																	]
																}
															],
															"policy": {
																"timeout": "0.12:00:00",
																"retry": 0,
																"retryIntervalInSeconds": 30,
																"secureOutput": false,
																"secureInput": false
															},
															"userProperties": [],
															"typeProperties": {
																"source": {
																	"type": "DelimitedTextSource",
																	"additionalColumns": [
																		{
																			"name": "ingestion_timestamp",
																			"value": {
																				"value": "@variables('timestamp')",
																				"type": "Expression"
																			}
																		}
																	],
																	"storeSettings": {
																		"type": "AzureBlobFSReadSettings",
																		"recursive": true,
																		"enablePartitionDiscovery": false
																	},
																	"formatSettings": {
																		"type": "DelimitedTextReadSettings",
																		"compressionProperties": {
																			"type": "ZipDeflateReadSettings"
																		}
																	}
																},
																"sink": {
																	"type": "DelimitedTextSink",
																	"storeSettings": {
																		"type": "AzureBlobFSWriteSettings"
																	},
																	"formatSettings": {
																		"type": "DelimitedTextWriteSettings",
																		"quoteAllText": true,
																		"fileExtension": ".txt"
																	}
																},
																"enableStaging": false,
																"translator": {
																	"type": "TabularTranslator",
																	"typeConversion": true,
																	"typeConversionSettings": {
																		"allowDataTruncation": true,
																		"treatBooleanAsNumber": false
																	}
																}
															},
															"inputs": [
																{
																	"referenceName": "ds_cvm_if_zip_adls",
																	"type": "DatasetReference",
																	"parameters": {
																		"fileName": {
																			"value": "@concat(variables('file_name'),'.zip')",
																			"type": "Expression"
																		}
																	}
																}
															],
															"outputs": [
																{
																	"referenceName": "ds_cvm_if_csv_adls",
																	"type": "DatasetReference",
																	"parameters": {
																		"fileName": {
																			"value": "@concat(variables('file_name'),'.csv')",
																			"type": "Expression"
																		},
																		"raw_folder": "investment-funds-quotes"
																	}
																}
															]
														}
													]
												}
											},
											{
												"name": "File_name",
												"type": "SetVariable",
												"state": "Inactive",
												"onInactiveMarkAs": "Succeeded",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "file_name",
													"value": {
														"value": "@item().url",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set file timestamp",
												"type": "SetVariable",
												"state": "Inactive",
												"onInactiveMarkAs": "Succeeded",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "timestamp",
													"value": {
														"value": "@split(item().update,' ')[0]",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"transform_quotes_pipeline_last_run": {
						"type": "String"
					},
					"raw_container_last_modified": {
						"type": "Array"
					},
					"new_files_to_transform": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_get_last_modified_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_get_metadata_adls_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_actual_quotes_links')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_csv_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_links_binary_http')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_links_binary_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_zip_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_incremental_funds_quotes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for actual CVM file links",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If transform pipeline already runs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_cvm_actual_quotes_links",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each file in raw datalake container",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for actual CVM file links",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for actual CVM file links').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get last modified date from raw container",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_cvm_if_csv_adls",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat(item().url,'.csv')",
													"type": "Expression"
												},
												"raw_folder": "investment-funds-quotes"
											}
										},
										"fieldList": [
											"exists",
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition2",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get last modified date from raw container",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get last modified date from raw container').output.lastModified,formatDateTime(variables('transform_quotes_pipeline_last_run'),'yyyy-MM-ddTHH:mm:ss'))\n\n\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Transform incremental ingestion funds quotes",
												"type": "ExecuteDataFlow",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataflow": {
														"referenceName": "df_transform_quotes",
														"type": "DataFlowReference",
														"parameters": {
															"SinkFileName": {
																"value": "'@{concat('transform_',activity('Get last modified date from raw container').output.itemName)}'",
																"type": "Expression"
															}
														},
														"datasetParameters": {
															"SourceQuotesFromRawLayer": {
																"sourceFileName": {
																	"value": "@activity('Get last modified date from raw container').output.itemName",
																	"type": "Expression"
																}
															},
															"SourceRegisterRawLayer": {},
															"SaveFilesInPresentationLayer": {},
															"SinkRowsWithErrors": {
																"errorRowsFileName": {
																	"value": "@concat('errorRows_',activity('Get last modified date from raw container').output.itemName)",
																	"type": "Expression"
																}
															}
														},
														"linkedServiceParameters": {}
													},
													"staging": {},
													"compute": {
														"coreCount": 8,
														"computeType": "General"
													},
													"traceLevel": "Fine"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Take transform quotes pipeline last run",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://management.azure.com/subscriptions/4d2b06c4-43c3-4174-ae4f-7cd2d52bdae2/resourceGroups/investment-funds/providers/Microsoft.DataFactory/factories/adf-investment-funds/queryPipelineRuns?api-version=2018-06-01",
							"body": {
								"lastUpdatedAfter": "2022-06-16T00:36:44.3345758Z",
								"lastUpdatedBefore": "2024-08-16T00:49:48.3686473Z",
								"filters": [
									{
										"operand": "PipelineName",
										"operator": "Equals",
										"values": [
											"pl_transform_incremental_funds_quotes"
										]
									},
									{
										"operand": "Status",
										"operator": "Equals",
										"values": [
											"Succeeded"
										]
									}
								],
								"orderBy": [
									{
										"order": "DESC",
										"orderBy": "RunEnd"
									}
								]
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com"
							}
						}
					},
					{
						"name": "If transform pipeline already runs",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Take transform quotes pipeline last run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(empty(activity('Take transform quotes pipeline last run').output.value))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set last pipeline run date to variable_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "transform_quotes_pipeline_last_run",
										"value": {
											"value": "@activity('Take transform quotes pipeline last run').output.value[0].lastUpdated",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set last pipeline run date to variable",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "transform_quotes_pipeline_last_run",
										"value": {
											"value": "1990-01-01 00:00:00",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"transform_quotes_pipeline_last_run": {
						"type": "String",
						"defaultValue": "'1990-01-01 00:00:00'"
					},
					"file_name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cvm_actual_quotes_links')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_if_csv_adls')]",
				"[concat(variables('factoryId'), '/dataflows/df_transform_quotes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_actual_quotes_links')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cvm_actual_links.csv",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_funds_register_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "register_fi.csv",
						"folderPath": "investment-funds-register",
						"fileSystem": "raw"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TP_FUNDO",
						"type": "String"
					},
					{
						"name": "CNPJ_FUNDO",
						"type": "String"
					},
					{
						"name": "DENOM_SOCIAL",
						"type": "String"
					},
					{
						"name": "DT_REG",
						"type": "String"
					},
					{
						"name": "DT_CONST",
						"type": "String"
					},
					{
						"name": "CD_CVM",
						"type": "String"
					},
					{
						"name": "DT_CANCEL",
						"type": "String"
					},
					{
						"name": "SIT",
						"type": "String"
					},
					{
						"name": "DT_INI_SIT",
						"type": "String"
					},
					{
						"name": "DT_INI_ATIV",
						"type": "String"
					},
					{
						"name": "DT_INI_EXERC",
						"type": "String"
					},
					{
						"name": "DT_FIM_EXERC",
						"type": "String"
					},
					{
						"name": "CLASSE",
						"type": "String"
					},
					{
						"name": "DT_INI_CLASSE",
						"type": "String"
					},
					{
						"name": "RENTAB_FUNDO",
						"type": "String"
					},
					{
						"name": "CONDOM",
						"type": "String"
					},
					{
						"name": "FUNDO_COTAS",
						"type": "String"
					},
					{
						"name": "FUNDO_EXCLUSIVO",
						"type": "String"
					},
					{
						"name": "TRIB_LPRAZO",
						"type": "String"
					},
					{
						"name": "PUBLICO_ALVO",
						"type": "String"
					},
					{
						"name": "ENTID_INVEST",
						"type": "String"
					},
					{
						"name": "TAXA_PERFM",
						"type": "String"
					},
					{
						"name": "INF_TAXA_PERFM",
						"type": "String"
					},
					{
						"name": "TAXA_ADM",
						"type": "String"
					},
					{
						"name": "INF_TAXA_ADM",
						"type": "String"
					},
					{
						"name": "VL_PATRIM_LIQ",
						"type": "String"
					},
					{
						"name": "DT_PATRIM_LIQ",
						"type": "String"
					},
					{
						"name": "DIRETOR",
						"type": "String"
					},
					{
						"name": "CNPJ_ADMIN",
						"type": "String"
					},
					{
						"name": "ADMIN",
						"type": "String"
					},
					{
						"name": "PF_PJ_GESTOR",
						"type": "String"
					},
					{
						"name": "CPF_CNPJ_GESTOR",
						"type": "String"
					},
					{
						"name": "GESTOR",
						"type": "String"
					},
					{
						"name": "CNPJ_AUDITOR",
						"type": "String"
					},
					{
						"name": "AUDITOR",
						"type": "String"
					},
					{
						"name": "CNPJ_CUSTODIANTE",
						"type": "String"
					},
					{
						"name": "CUSTODIANTE",
						"type": "String"
					},
					{
						"name": "CNPJ_CONTROLADOR",
						"type": "String"
					},
					{
						"name": "CONTROLADOR",
						"type": "String"
					},
					{
						"name": "INVEST_CEMPR_EXTER",
						"type": "String"
					},
					{
						"name": "CLASSE_ANBIMA",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_historic_source_binary_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_http",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat('HIST/',dataset().relativeURL)",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_csv_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"raw_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().raw_folder",
							"type": "Expression"
						},
						"fileSystem": "raw"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_historic_quotes_links')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_json_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "links.json",
						"fileSystem": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_links_binary_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().relativeURL",
							"type": "Expression"
						},
						"folderPath": "staging",
						"fileSystem": "binary"
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_links_binary_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_http",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().relativeURL",
							"type": "Expression"
						}
					},
					"compression": {
						"type": "ZipDeflate",
						"level": "Optimal"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_links_csv_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().relativeURL",
							"type": "Expression"
						},
						"fileSystem": "teste"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_links_csv_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_http",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().relativeUrl",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_register_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "register_fi.csv",
						"folderPath": "investment-funds-register",
						"fileSystem": "raw"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_register_http')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_register_http",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "dados/FI/CAD/DADOS/cad_fi.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_register_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_if_zip_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "staging",
						"fileSystem": "binary"
					},
					"columnDelimiter": ";",
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_cvm_raw_if_adls')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "investment-funds-historic-quotes",
						"fileSystem": "raw"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TP_FUNDO",
						"type": "String"
					},
					{
						"name": "CNPJ_FUNDO",
						"type": "String"
					},
					{
						"name": "DT_COMPTC",
						"type": "String"
					},
					{
						"name": "VL_TOTAL",
						"type": "String"
					},
					{
						"name": "VL_QUOTA",
						"type": "String"
					},
					{
						"name": "VL_PATRIM_LIQ",
						"type": "String"
					},
					{
						"name": "CAPTC_DIA",
						"type": "String"
					},
					{
						"name": "RESG_DIA",
						"type": "String"
					},
					{
						"name": "NR_COTST",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_get_last_modified_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "investment-funds-quotes",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TP_FUNDO;CNPJ_FUNDO;DT_COMPTC;VL_TOTAL;VL_QUOTA;VL_PATRIM_LIQ;CAPTC_DIA;RESG_DIA;NR_COTST",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_get_metadata_adls_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"raw_adls_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().raw_adls_file_name",
							"type": "Expression"
						},
						"folderPath": "investment-funds-quotes",
						"fileSystem": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TP_FUNDO;CNPJ_FUNDO;DT_COMPTC;VL_TOTAL;VL_QUOTA;VL_PATRIM_LIQ;CAPTC_DIA;RESG_DIA;NR_COTST",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_investiment_funds_quotas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_investiment_funds_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "tipo_fundo",
						"type": "varchar"
					},
					{
						"name": "cnpj_fundo",
						"type": "varchar"
					},
					{
						"name": "data_competencia",
						"type": "date"
					},
					{
						"name": "valor_total",
						"type": "decimal",
						"precision": 14,
						"scale": 2
					},
					{
						"name": "valor_cota",
						"type": "float",
						"precision": 15
					},
					{
						"name": "valor_patrimonial_liq",
						"type": "decimal",
						"precision": 14,
						"scale": 2
					},
					{
						"name": "capacity_dia",
						"type": "decimal",
						"precision": 14,
						"scale": 2
					},
					{
						"name": "resgates_dia",
						"type": "decimal",
						"precision": 14,
						"scale": 2
					},
					{
						"name": "numero_cotistas",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "investiment_funds",
					"table": "diary_quota"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_investiment_funds_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_investiment_funds_register')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_investiment_funds_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "tipo_fundo",
						"type": "varchar"
					},
					{
						"name": "cnpj_fundo",
						"type": "varchar"
					},
					{
						"name": "denom_social",
						"type": "varchar"
					},
					{
						"name": "data_registro",
						"type": "date"
					},
					{
						"name": "data_constituicao",
						"type": "date"
					},
					{
						"name": "cod_cvm",
						"type": "varchar"
					},
					{
						"name": "data_cancel",
						"type": "date"
					},
					{
						"name": "situacao",
						"type": "varchar"
					},
					{
						"name": "data_inicio_sit",
						"type": "date"
					},
					{
						"name": "data_inicio_ativ",
						"type": "date"
					},
					{
						"name": "data_inicio_exerc",
						"type": "date"
					},
					{
						"name": "data_fim_exerc",
						"type": "date"
					},
					{
						"name": "classe",
						"type": "varchar"
					},
					{
						"name": "data_inic_classe",
						"type": "date"
					},
					{
						"name": "rentab_fundo",
						"type": "varchar"
					},
					{
						"name": "tributacao_lp",
						"type": "varchar"
					},
					{
						"name": "publico_alvo",
						"type": "varchar"
					},
					{
						"name": "taxa_perform",
						"type": "float",
						"precision": 15
					},
					{
						"name": "taxa_adm",
						"type": "float",
						"precision": 15
					},
					{
						"name": "valor_patrim_liq",
						"type": "decimal",
						"precision": 14,
						"scale": 2
					},
					{
						"name": "data_patrim_liq",
						"type": "date"
					},
					{
						"name": "diretor",
						"type": "varchar"
					},
					{
						"name": "cnpj_admin",
						"type": "varchar"
					},
					{
						"name": "adm",
						"type": "varchar"
					},
					{
						"name": "gestor",
						"type": "varchar"
					},
					{
						"name": "classe_anbima",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "investiment_funds",
					"table": "funds_registration"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_investiment_funds_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_transform_funds_historic_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": "investiment-funds-historic-quotes",
						"fileSystem": "transform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_transform_funds_register_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "investiment-funds-register",
						"fileSystem": "transform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_transform_funds_register_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "register_fi.csv",
						"folderPath": "investment-funds-register",
						"fileSystem": "raw"
					},
					"columnDelimiter": ";",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TP_FUNDO",
						"type": "String"
					},
					{
						"name": "CNPJ_FUNDO",
						"type": "String"
					},
					{
						"name": "DENOM_SOCIAL",
						"type": "String"
					},
					{
						"name": "DT_REG",
						"type": "String"
					},
					{
						"name": "DT_CONST",
						"type": "String"
					},
					{
						"name": "CD_CVM",
						"type": "String"
					},
					{
						"name": "DT_CANCEL",
						"type": "String"
					},
					{
						"name": "SIT",
						"type": "String"
					},
					{
						"name": "DT_INI_SIT",
						"type": "String"
					},
					{
						"name": "DT_INI_ATIV",
						"type": "String"
					},
					{
						"name": "DT_INI_EXERC",
						"type": "String"
					},
					{
						"name": "DT_FIM_EXERC",
						"type": "String"
					},
					{
						"name": "CLASSE",
						"type": "String"
					},
					{
						"name": "DT_INI_CLASSE",
						"type": "String"
					},
					{
						"name": "RENTAB_FUNDO",
						"type": "String"
					},
					{
						"name": "CONDOM",
						"type": "String"
					},
					{
						"name": "FUNDO_COTAS",
						"type": "String"
					},
					{
						"name": "FUNDO_EXCLUSIVO",
						"type": "String"
					},
					{
						"name": "TRIB_LPRAZO",
						"type": "String"
					},
					{
						"name": "PUBLICO_ALVO",
						"type": "String"
					},
					{
						"name": "ENTID_INVEST",
						"type": "String"
					},
					{
						"name": "TAXA_PERFM",
						"type": "String"
					},
					{
						"name": "INF_TAXA_PERFM",
						"type": "String"
					},
					{
						"name": "TAXA_ADM",
						"type": "String"
					},
					{
						"name": "INF_TAXA_ADM",
						"type": "String"
					},
					{
						"name": "VL_PATRIM_LIQ",
						"type": "String"
					},
					{
						"name": "DT_PATRIM_LIQ",
						"type": "String"
					},
					{
						"name": "DIRETOR",
						"type": "String"
					},
					{
						"name": "CNPJ_ADMIN",
						"type": "String"
					},
					{
						"name": "ADMIN",
						"type": "String"
					},
					{
						"name": "PF_PJ_GESTOR",
						"type": "String"
					},
					{
						"name": "CPF_CNPJ_GESTOR",
						"type": "String"
					},
					{
						"name": "GESTOR",
						"type": "String"
					},
					{
						"name": "CNPJ_AUDITOR",
						"type": "String"
					},
					{
						"name": "AUDITOR",
						"type": "String"
					},
					{
						"name": "CNPJ_CUSTODIANTE",
						"type": "String"
					},
					{
						"name": "CUSTODIANTE",
						"type": "String"
					},
					{
						"name": "CNPJ_CONTROLADOR",
						"type": "String"
					},
					{
						"name": "CONTROLADOR",
						"type": "String"
					},
					{
						"name": "INVEST_CEMPR_EXTER",
						"type": "String"
					},
					{
						"name": "CLASSE_ANBIMA",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_transform_funds_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Transform"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().sourceFileName",
							"type": "Expression"
						},
						"folderPath": "investment-funds-quotes",
						"fileSystem": "raw"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TP_FUNDO",
						"type": "String"
					},
					{
						"name": "CNPJ_FUNDO",
						"type": "String"
					},
					{
						"name": "DT_COMPTC",
						"type": "String"
					},
					{
						"name": "VL_TOTAL",
						"type": "String"
					},
					{
						"name": "VL_QUOTA",
						"type": "String"
					},
					{
						"name": "VL_PATRIM_LIQ",
						"type": "String"
					},
					{
						"name": "CAPTC_DIA",
						"type": "String"
					},
					{
						"name": "RESG_DIA",
						"type": "String"
					},
					{
						"name": "NR_COTST",
						"type": "String"
					},
					{
						"name": "ingestion_timestamp",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_transform_rows_with_error_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_cvm_if_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"errorRowsFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().errorRowsFileName",
							"type": "Expression"
						},
						"folderPath": "investiment-funds-assert-fail",
						"fileSystem": "transform"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction_ls_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction_ls_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_databricks_actual_quotes_http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4375646200372583.3.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('ls_azure_databricks_actual_quotes_http_accessToken')]"
					},
					"newClusterNodeType": "Standard_DS3_v2",
					"newClusterNumOfWorker": "1",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "14.3.x-cpu-ml-scala2.12",
					"newClusterDriverNodeType": "Standard_DS3_v2",
					"clusterOption": "Fixed",
					"newClusterInitScripts": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_cvm_if_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_cvm_if_adls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_cvm_if_adls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_cvm_if_http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_cvm_if_http_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_cvm_if_register_http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_cvm_if_register_http_properties_typeProperties_url')]",
					"enableServerCertificateValidation": false,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_investiment_funds_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sql_investiment_funds_db_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_funds_historic_quotes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_cvm_raw_if_adls",
								"type": "DatasetReference"
							},
							"name": "investimentFundsQuotes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_transform_funds_historic_sink",
								"type": "DatasetReference"
							},
							"name": "FundsQuotesSink",
							"rejectedDataLinkedService": {
								"referenceName": "ls_cvm_if_adls",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "selectOnlyRequiredFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TP_FUNDO as string,",
						"          CNPJ_FUNDO as string,",
						"          DT_COMPTC as date 'yyyy-MM-dd',",
						"          VL_TOTAL as decimal(13,2),",
						"          VL_QUOTA as float,",
						"          VL_PATRIM_LIQ as decimal(13,2),",
						"          CAPTC_DIA as decimal(13,2),",
						"          RESG_DIA as decimal(13,2),",
						"          NR_COTST as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> investimentFundsQuotes",
						"investimentFundsQuotes select(mapColumn(",
						"          tipo_fundo = TP_FUNDO,",
						"          cnpj_fundo = CNPJ_FUNDO,",
						"          dt_posicao = DT_COMPTC,",
						"          valor_total = VL_TOTAL,",
						"          valor_quota = VL_QUOTA,",
						"          valor_patrim_liquido = VL_PATRIM_LIQ,",
						"          capacity_dia = CAPTC_DIA,",
						"          resgates_dia = RESG_DIA,",
						"          numero_cotistas = NR_COTST",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOnlyRequiredFields",
						"selectOnlyRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FundsQuotesSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_cvm_raw_if_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_transform_funds_historic_sink')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_funds_register')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_transform_funds_register_source",
								"type": "DatasetReference"
							},
							"name": "FundsRegisterSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_transform_funds_register_sink",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_cvm_if_adls",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "RenamingAndRemovingColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TP_FUNDO as string,",
						"          CNPJ_FUNDO as string,",
						"          DENOM_SOCIAL as string,",
						"          DT_REG as date,",
						"          DT_CONST as date,",
						"          CD_CVM as integer,",
						"          DT_CANCEL as date,",
						"          SIT as string,",
						"          DT_INI_SIT as date,",
						"          DT_INI_ATIV as string,",
						"          DT_INI_EXERC as date,",
						"          DT_FIM_EXERC as date,",
						"          CLASSE as string,",
						"          DT_INI_CLASSE as string,",
						"          RENTAB_FUNDO as string,",
						"          CONDOM as string,",
						"          FUNDO_COTAS as string,",
						"          FUNDO_EXCLUSIVO as string,",
						"          TRIB_LPRAZO as string,",
						"          PUBLICO_ALVO as string,",
						"          ENTID_INVEST as string,",
						"          TAXA_PERFM as string,",
						"          INF_TAXA_PERFM as string,",
						"          TAXA_ADM as string,",
						"          INF_TAXA_ADM as string,",
						"          VL_PATRIM_LIQ as double,",
						"          DT_PATRIM_LIQ as date,",
						"          DIRETOR as string,",
						"          CNPJ_ADMIN as string,",
						"          ADMIN as string,",
						"          PF_PJ_GESTOR as string,",
						"          CPF_CNPJ_GESTOR as string,",
						"          GESTOR as string,",
						"          CNPJ_AUDITOR as string,",
						"          AUDITOR as string,",
						"          CNPJ_CUSTODIANTE as string,",
						"          CUSTODIANTE as string,",
						"          CNPJ_CONTROLADOR as string,",
						"          CONTROLADOR as string,",
						"          INVEST_CEMPR_EXTER as string,",
						"          CLASSE_ANBIMA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundsRegisterSource",
						"FundsRegisterSource select(mapColumn(",
						"          tipo_fundo = TP_FUNDO,",
						"          cnpj_fundo = CNPJ_FUNDO,",
						"          denom_social = DENOM_SOCIAL,",
						"          data_registro = DT_REG,",
						"          data_constituicao = DT_CONST,",
						"          cod_cvm = CD_CVM,",
						"          data_cancel = DT_CANCEL,",
						"          situacao = SIT,",
						"          data_inicio_sit = DT_INI_SIT,",
						"          data_inicio_ativ = DT_INI_ATIV,",
						"          data_inicio_exerc = DT_INI_EXERC,",
						"          data_fim_exerc = DT_FIM_EXERC,",
						"          classe = CLASSE,",
						"          data_inic_classe = DT_INI_CLASSE,",
						"          rentab_fundo = RENTAB_FUNDO,",
						"          tributacao_lp = TRIB_LPRAZO,",
						"          publico_alvo = PUBLICO_ALVO,",
						"          taxa_perform = TAXA_PERFM,",
						"          taxa_adm = TAXA_ADM,",
						"          valor_patrim_liq = VL_PATRIM_LIQ,",
						"          data_patrim_liq = DT_PATRIM_LIQ,",
						"          diretor = DIRETOR,",
						"          cnpj_admin = CNPJ_ADMIN,",
						"          admin = ADMIN,",
						"          gestor = GESTOR,",
						"          classe_anbima = CLASSE_ANBIMA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenamingAndRemovingColumns",
						"RenamingAndRemovingColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_transform_funds_register_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_transform_funds_register_sink')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_quotes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_transform_funds_source",
								"type": "DatasetReference"
							},
							"name": "SourceQuotesFromRawLayer"
						},
						{
							"dataset": {
								"referenceName": "ds_cvm_funds_register_adls",
								"type": "DatasetReference"
							},
							"name": "SourceRegisterRawLayer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_cvm_if_adls",
								"type": "LinkedServiceReference"
							},
							"name": "SaveFilesInPresentationLayer",
							"rejectedDataLinkedService": {
								"referenceName": "ls_cvm_if_adls",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_transform_rows_with_error_sink",
								"type": "DatasetReference"
							},
							"name": "SinkRowsWithErrors"
						}
					],
					"transformations": [
						{
							"name": "DataQualityAsserts"
						},
						{
							"name": "WindowFunctionsToFindDuplicates",
							"description": "Aggregates data based on a window and joins with original data to find duplicate rows."
						},
						{
							"name": "splitDataBasedOnAsserts"
						},
						{
							"name": "LowerColumnNames",
							"description": "Lowering Column Names"
						},
						{
							"name": "SelectMainColumnsAfterdataQuality",
							"description": "Select only desired columns."
						},
						{
							"name": "SelectMainColumnsFundsRegister",
							"description": "Select main coluns of investiment funds register"
						},
						{
							"name": "InsertTransformDateColumn",
							"description": "Inserting transform timestamp column"
						},
						{
							"name": "castColumnTypes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     SinkFileName as string",
						"}",
						"source(output(",
						"          TP_FUNDO as string,",
						"          CNPJ_FUNDO as string,",
						"          DT_COMPTC as string,",
						"          VL_TOTAL as string,",
						"          VL_QUOTA as string,",
						"          VL_PATRIM_LIQ as string,",
						"          CAPTC_DIA as string,",
						"          RESG_DIA as string,",
						"          NR_COTST as string,",
						"          ingestion_timestamp as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceQuotesFromRawLayer",
						"source(output(",
						"          TP_FUNDO as string,",
						"          CNPJ_FUNDO as string,",
						"          DENOM_SOCIAL as string,",
						"          DT_REG as string,",
						"          DT_CONST as string,",
						"          CD_CVM as string,",
						"          DT_CANCEL as string,",
						"          SIT as string,",
						"          DT_INI_SIT as string,",
						"          DT_INI_ATIV as string,",
						"          DT_INI_EXERC as string,",
						"          DT_FIM_EXERC as string,",
						"          CLASSE as string,",
						"          DT_INI_CLASSE as string,",
						"          RENTAB_FUNDO as string,",
						"          CONDOM as string,",
						"          FUNDO_COTAS as string,",
						"          FUNDO_EXCLUSIVO as string,",
						"          TRIB_LPRAZO as string,",
						"          PUBLICO_ALVO as string,",
						"          ENTID_INVEST as string,",
						"          TAXA_PERFM as string,",
						"          INF_TAXA_PERFM as string,",
						"          TAXA_ADM as string,",
						"          INF_TAXA_ADM as string,",
						"          VL_PATRIM_LIQ as string,",
						"          DT_PATRIM_LIQ as string,",
						"          DIRETOR as string,",
						"          CNPJ_ADMIN as string,",
						"          ADMIN as string,",
						"          PF_PJ_GESTOR as string,",
						"          CPF_CNPJ_GESTOR as string,",
						"          GESTOR as string,",
						"          CNPJ_AUDITOR as string,",
						"          AUDITOR as string,",
						"          CNPJ_CUSTODIANTE as string,",
						"          CUSTODIANTE as string,",
						"          CNPJ_CONTROLADOR as string,",
						"          CONTROLADOR as string,",
						"          INVEST_CEMPR_EXTER as string,",
						"          CLASSE_ANBIMA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceRegisterRawLayer",
						"WindowFunctionsToFindDuplicates, SelectMainColumnsFundsRegister assert(expectTrue(!isNull(LowerColumnNames@cnpj_fundo), false, 'assertCNPJNotNull'),",
						"     expectTrue(!isNull(dt_comptc), false, 'assertDtComptcNotNull'),",
						"     expectTrue(vl_quota>0, false, 'assertValorCotaMaiorZero'),",
						"     expectTrue(row_number==1, false, 'assertNotDuplicates'),",
						"     expectExists(LowerColumnNames@cnpj_fundo == SelectMainColumnsFundsRegister@CNPJ_FUNDO, false, 'assertFundsExists')) ~> DataQualityAsserts",
						"LowerColumnNames window(over(cnpj_fundo,",
						"          dt_comptc),",
						"     asc(dt_comptc, true),",
						"     row_number = rowNumber()) ~> WindowFunctionsToFindDuplicates",
						"DataQualityAsserts split(!isError(),",
						"     disjoint: false) ~> splitDataBasedOnAsserts@(AssertPassedCondition, AssertFailCondition)",
						"castColumnTypes select(mapColumn(",
						"          each(match(true()),",
						"               lower($$) = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LowerColumnNames",
						"splitDataBasedOnAsserts@AssertPassedCondition select(mapColumn(",
						"          tp_fundo,",
						"          cnpj_fundo,",
						"          dt_comptc,",
						"          vl_total,",
						"          vl_quota,",
						"          vl_patrim_liq,",
						"          captc_dia,",
						"          resg_dia,",
						"          nr_cotst,",
						"          ingestion_timestamp",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMainColumnsAfterdataQuality",
						"SourceRegisterRawLayer select(mapColumn(",
						"          TP_FUNDO,",
						"          CNPJ_FUNDO,",
						"          DENOM_SOCIAL,",
						"          DT_REG,",
						"          DT_CONST,",
						"          CD_CVM,",
						"          DT_CANCEL,",
						"          SIT,",
						"          DT_INI_SIT,",
						"          DT_INI_ATIV,",
						"          DT_INI_EXERC,",
						"          DT_FIM_EXERC,",
						"          CLASSE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMainColumnsFundsRegister",
						"SelectMainColumnsAfterdataQuality derive(transform_timestamp = currentDate()) ~> InsertTransformDateColumn",
						"SourceQuotesFromRawLayer cast(output(",
						"          TP_FUNDO as string,",
						"          CNPJ_FUNDO as string,",
						"          DT_COMPTC as date,",
						"          VL_TOTAL as double,",
						"          VL_QUOTA as double,",
						"          VL_PATRIM_LIQ as double,",
						"          CAPTC_DIA as double,",
						"          RESG_DIA as double,",
						"          NR_COTST as integer,",
						"          ingestion_timestamp as date",
						"     ),",
						"     errors: true) ~> castColumnTypes",
						"InsertTransformDateColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     fileSystem: 'transform',",
						"     folderPath: 'investiment-funds-quotes',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[($SinkFileName)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_fileSystem: 'transform',",
						"     assertFailure_folderPath: 'investiment-funds-assert-fail',",
						"     ignoreAssertFailedRows: true,",
						"     partitionBy('hash', 1)) ~> SaveFilesInPresentationLayer",
						"splitDataBasedOnAsserts@AssertFailCondition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkRowsWithErrors"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_transform_funds_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_cvm_funds_register_adls')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_cvm_if_adls')]",
				"[concat(variables('factoryId'), '/datasets/ds_transform_rows_with_error_sink')]"
			]
		}
	]
}