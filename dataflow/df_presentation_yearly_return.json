{
	"name": "df_presentation_yearly_return",
	"properties": {
		"folder": {
			"name": "Presentation"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_if_cvm_transformed_quotes",
						"type": "DatasetReference"
					},
					"name": "TransformedSource"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_cvm_if_adls",
						"type": "LinkedServiceReference"
					},
					"name": "presentationLayerYearReturn"
				},
				{
					"linkedService": {
						"referenceName": "ls_cvm_if_adls",
						"type": "LinkedServiceReference"
					},
					"name": "presentationLayerMonthReturn"
				}
			],
			"transformations": [
				{
					"name": "windowFunctionRowNumber",
					"description": "Aggregates data based on CNPJ field and calculate row_number and first functions to obtain the first quota value for the series."
				},
				{
					"name": "derivedColumnDailyReturn",
					"description": "Create a daily return column from quota value and first quota value for every CNPJ field. "
				},
				{
					"name": "WindowFunctionCumulativeReturn"
				},
				{
					"name": "split1"
				},
				{
					"name": "flowletInvestimentFundsReturn",
					"flowlet": {
						"referenceName": "flowletInvestimentFundsReturn",
						"type": "DataFlowReference"
					}
				}
			],
			"scriptLines": [
				"source(output(",
				"          tp_fundo as string,",
				"          cnpj_fundo as string,",
				"          dt_comptc as date,",
				"          vl_total as double,",
				"          vl_quota as double,",
				"          vl_patrim_liq as double,",
				"          captc_dia as double,",
				"          resg_dia as double,",
				"          nr_cotst as integer,",
				"          ingestion_timestamp as date,",
				"          transform_timestamp as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true) ~> TransformedSource",
				"split1@investimentFundsYearReturn window(over(cnpj_fundo),",
				"     asc(dt_comptc, true),",
				"     row_number = rowNumber(),",
				"          first_quota = first(vl_quota)) ~> windowFunctionRowNumber",
				"windowFunctionRowNumber derive(daily_return = vl_quota/first_quota -1) ~> derivedColumnDailyReturn",
				"derivedColumnDailyReturn window(over(cnpj_fundo),",
				"     asc(dt_comptc, true),",
				"     cumulative_return = sum(daily_return)) ~> WindowFunctionCumulativeReturn",
				"TransformedSource split(dt_comptc> toDate(concat(toString(year(currentDate())),'-01-01')),",
				"     dt_comptc> toDate(concat(toString(year(addDays(currentDate(),-2))),toString(month(addDays(currentDate(),-2))),'-01')),",
				"     disjoint: false) ~> split1@(investimentFundsYearReturn, investimentFundsMonthReturn, )",
				"split1@investimentFundsMonthReturn compose(mapColumn(",
				"          tp_fundo,",
				"          cnpj_fundo,",
				"          dt_comptc,",
				"          vl_total,",
				"          vl_quota,",
				"          vl_patrim_liq,",
				"          captc_dia,",
				"          resg_dia,",
				"          nr_cotst,",
				"          ingestion_timestamp,",
				"          transform_timestamp",
				"     ),",
				"     composition: 'flowletInvestimentFundsReturn') ~> flowletInvestimentFundsReturn@(presentationLayer)",
				"WindowFunctionCumulativeReturn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'presentation',",
				"     folderPath: 'YearReturn',",
				"     filePattern:'presentation_total_return',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> presentationLayerYearReturn",
				"flowletInvestimentFundsReturn@presentationLayer sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'presentation',",
				"     folderPath: 'MonthReturn',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> presentationLayerMonthReturn"
			]
		}
	}
}